// Generated by CoffeeScript 1.6.3
var Index, nib, path, stylus;

(require('source-map-support')).install({
  handleUncaughtExceptions: false
});

path = require('path');

stylus = require('stylus');

nib = require('nib');

module.exports = new (Index = (function() {
  function Index() {}

  Index.prototype.polvo = true;

  Index.prototype.type = 'style';

  Index.prototype.name = 'stylus';

  Index.prototype.output = 'css';

  Index.prototype.ext = /\.styl$/m;

  Index.prototype.exts = ['.styl'];

  Index.prototype.partials = true;

  Index.prototype.is_partial = function(filepath) {
    return /^_/m.test(path.basename(filepath));
  };

  Index.prototype.compile = function(filepath, source, debug, done) {
    return stylus(source).set('filename', filepath).use(nib()).render(function(err, css) {
      if (err != null) {
        throw err;
      }
      return done(css, null);
    });
  };

  Index.prototype.resolve_dependents = function(file, files) {
    var dependents, dirpath, each, full_id, has_import_calls, match, match_all, name, short_id, _i, _len;
    dependents = [];
    has_import_calls = /^\s*(?!\/\/)@import\s/m;
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      each = files[_i];
      if (!has_import_calls.test(each.raw)) {
        continue;
      }
      dirpath = path.dirname(each.filepath);
      name = path.basename(each.filepath);
      match_all = /^\s*(?!\/\/)@import\s+(?:"|')(\S+)(?:"|')/mg;
      while ((match = match_all.exec(each.raw)) != null) {
        short_id = match[1];
        if ('' === path.extname(short_id)) {
          short_id += '.styl';
        }
        full_id = path.join(dirpath, short_id);
        if (full_id === file.filepath) {
          if (!this.is_partial(name)) {
            dependents.push(each);
          } else {
            dependents = dependents.concat(this.resolve_dependents(each, files));
          }
        }
      }
    }
    return dependents;
  };

  return Index;

})());
